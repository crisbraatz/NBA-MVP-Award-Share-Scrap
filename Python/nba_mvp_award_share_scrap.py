# -*- coding: utf-8 -*-
"""NBA-MVP-Award-Share-Scrap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vQjXcmJhJWxm1_d9h-mH_sehpgEF5L5Z
"""

from bs4 import BeautifulSoup, Comment
from urllib.request import urlopen
import pandas as pd
import re
import warnings
warnings.filterwarnings('ignore')
from google.colab import drive # Import only if you are using Google Colab

seasons = list(range(1980, 2022))

basic_stats_per_season = []
for season in seasons:
    url = 'https://www.basketball-reference.com/leagues/NBA_{}_per_game.html'.format(season)
    html = urlopen(url)
    soup = BeautifulSoup(html)

    headers = [th.getText() for th in soup.findAll('tr', limit = 2)[0].findAll('th')][1:]

    rows = soup.findAll('tr', class_ = lambda x: x != 'thead')[1:]
    players_stats = [[td.getText() for td in rows[i].findAll('td')] for i in range(len(rows))]

    stats = pd.DataFrame(players_stats, columns = headers)
    stats['Season'] = season

    basic_stats_per_season.append(stats)

basic_stats = pd.concat(basic_stats_per_season)

basic_stats.tail()

advanced_stats_per_season = []
for season in seasons:
    url = 'https://www.basketball-reference.com/leagues/NBA_{}_advanced.html'.format(season)
    html = urlopen(url)
    soup = BeautifulSoup(html)

    headers = [th.getText() for th in soup.findAll('tr', limit = 2)[0].findAll('th')][1:]

    rows = soup.findAll('tr', class_ = lambda x: x != 'thead')[1:]
    players_stats = [[td.getText() for td in rows[i].findAll('td')] for i in range(len(rows))]

    stats = pd.DataFrame(players_stats, columns = headers)
    stats['Season'] = season

    advanced_stats_per_season.append(stats)

advanced_stats = pd.concat(advanced_stats_per_season)

advanced_stats.tail()

mvp_award_voting_per_season = []
for season in seasons[:-1]:
    url = 'https://www.basketball-reference.com/awards/awards_{}.html'.format(season)
    html = urlopen(url)
    soup = BeautifulSoup(html)

    headers = [th.getText() for th in soup.findAll('tr', limit = 2)[1].findAll('th')][1:]

    table = soup.find(lambda tag: tag.has_attr('id') and tag['id'] == 'mvp')
    rows = table.findAll('tr', class_ = lambda x: x != 'thead')[1:]
    players_stats = [[td.getText() for td in rows[i].findAll('td')] for i in range(len(rows))]

    stats = pd.DataFrame(players_stats, columns = headers)
    stats['Season'] = season

    mvp_award_voting_per_season.append(stats)

mvp_award_voting = pd.concat(mvp_award_voting_per_season)

mvp_award_voting.tail()

standings_per_season = []
for season in seasons:
    url = 'https://www.basketball-reference.com/leagues/NBA_{}_standings.html'.format(season)
    html = urlopen(url)
    soup = BeautifulSoup(html)

    commented_html = []
    for comments in soup.findAll(text = lambda text:isinstance(text, Comment)):
        commented_html.append(comments.extract())
    commented_soup = BeautifulSoup(commented_html[28])

    headers = [th.getText() for th in commented_soup.findAll('tr', limit = 2)[1].findAll('th')][:3]

    rows = commented_soup.findAll('tr')[2:]
    teams_stats = [[td.getText() for td in rows[i].findAll(lambda tag: tag.has_attr('data-stat') and tag['data-stat'] == 'ranker' or 'team_name' or 'Overall')][:4] for i in range(len(rows))]
    for team_stat in teams_stats:
        team_stat.pop(2)

    stats = pd.DataFrame(teams_stats, columns = headers)
    stats['Season'] = season

    standings_per_season.append(stats)

standings_stats = pd.concat(standings_per_season)

standings_stats.tail()

teams = {'Atlanta Hawks': 'ATL',
         'Boston Celtics': 'BOS',
         'Brooklyn Nets': 'BRK',
         'Charlotte Bobcats': 'CHA',
         'Charlotte Hornets': 'CHH/CHO',
         'Chicago Bulls': 'CHI',
         'Cleveland Cavaliers': 'CLE',
         'Dallas Mavericks': 'DAL',
         'Denver Nuggets': 'DEN',
         'Detroit Pistons': 'DET',
         'Golden State Warriors': 'GSW',
         'Houston Rockets': 'HOU',
         'Indiana Pacers': 'IND',
         'Kansas City Kings': 'KCK',
         'Los Angeles Clippers': 'LAC',
         'Los Angeles Lakers': 'LAL',
         'Memphis Grizzlies': 'MEM',
         'Miami Heat': 'MIA',
         'Milwaukee Bucks': 'MIL',
         'Minnesota Timberwolves': 'MIN',
         'New Jersey Nets': 'NJN',
         'New Orleans Hornets': 'NOH',
         'New Orleans/Oklahoma City Hornets': 'NOK',
         'New Orleans Pelicans': 'NOP',
         'New York Knicks': 'NYK',
         'Oklahoma City Thunder': 'OKC',
         'Orlando Magic': 'ORL',
         'Philadelphia 76ers': 'PHI',
         'Phoenix Suns': 'PHO',
         'Portland Trail Blazers': 'POR',
         'Sacramento Kings': 'SAC',
         'San Antonio Spurs': 'SAS',
         'San Diego Clippers': 'SDC',
         'Seattle SuperSonics': 'SEA',
         'Toronto Raptors': 'TOR',
         'Utah Jazz': 'UTA',
         'Vancouver Grizzlies': 'VAN',
         'Washington Wizards': 'WAS',
         'Washington Bullets': 'WSB'}

def transform_team_column(x: str) -> str:
    return teams[x]

standings_stats.Team = standings_stats.Team.apply(transform_team_column)

maskChh = (standings_stats.Team == 'CHH/CHO') & (standings_stats.Season <= 2002)
standings_stats.Team[maskChh] = 'CHH'

maskCho = (standings_stats.Team == 'CHH/CHO') & (standings_stats.Season >= 2015)
standings_stats.Team[maskCho] = 'CHO'

def transform_player_column(x: str) -> str:
    return x.replace('*', '')

basic_stats.Player = basic_stats.Player.apply(transform_player_column)
advanced_stats.Player = advanced_stats.Player.apply(transform_player_column)

basic_stats['PlayerTmSeason'] = basic_stats.Player.map(str) + basic_stats.Tm.map(str) + basic_stats.Season.map(str)
basic_stats['TmSeason'] = basic_stats.Tm.map(str) + basic_stats.Season.map(str)

advanced_stats['PlayerTmSeason'] = advanced_stats.Player.map(str) + advanced_stats.Tm.map(str) + advanced_stats.Season.map(str)
mvp_award_voting['PlayerTmSeason'] = mvp_award_voting.Player.map(str) + mvp_award_voting.Tm.map(str) + mvp_award_voting.Season.map(str)
standings_stats['TmSeason'] = standings_stats.Team.map(str) + standings_stats.Season.map(str)

df = basic_stats.merge(advanced_stats, on = 'PlayerTmSeason', how = 'left')
df = df.merge(mvp_award_voting, on = 'PlayerTmSeason', how = 'left')
df = df.merge(standings_stats, on = 'TmSeason', how = 'left')

df.info()

df = df.loc[:, ~df.columns.duplicated()]

df.drop(columns = ['\xa0', 'PlayerTmSeason', 'TmSeason', 'Player_y', 'Pos_y', 'Age_y', 'Tm_y', 'G_y', 'MP_y', 'Season_y', 'Player', 'Age', 'Tm',
                   'G', 'MP', 'PTS_y', 'TRB_y', 'AST_y', 'STL_y', 'BLK_y', 'FG%_y', '3P%_y', 'FT%_y', 'WS_y', 'WS/48_y', 'Team'],
    inplace = True)

df.rename(columns = {'Player_x': 'Player', 'Pos_x': 'Pos', 'Age_x': 'Age', 'Tm_x': 'Tm', 'G_x': 'G', 'MP_x': 'MP',
                     'FG%_x': 'FG%', '3P%_x': '3P%', 'FT%_x': 'FT%', 'TRB_x': 'TRB', 'AST_x': 'AST', 'STL_x': 'STL',
                     'BLK_x': 'BLK', 'PTS_x': 'PTS', 'Season_x': 'Season', 'WS_x': 'WS', 'WS/48_x': 'WS/48'},
    inplace = True)

df.fillna({'G': 0, 'GS': 0, 'MP': 0, 'FG': 0, 'FGA': 0, 'FG%': 0, '3P': 0, '3PA': 0, '3P%': 0, '2P': 0,
           '2PA': 0, '2P%': 0, 'eFG%': 0, 'FT': 0, 'FTA': 0, 'FT%': 0, 'ORB': 0, 'DRB': 0, 'TRB': 0, 'AST': 0,
           'STL': 0, 'BLK': 0, 'TOV': 0, 'PF': 0, 'PTS': 0, 'PER': 0, 'TS%': 0, '3PAr': 0, 'FTr': 0, 'ORB%': 0,
           'DRB%': 0, 'TRB%': 0, 'AST%': 0, 'STL%': 0, 'BLK%': 0, 'TOV%': 0, 'USG%': 0, 'OWS': 0, 'DWS': 0, 'WS': 0,
           'WS/48': 0, 'OBPM': 0, 'DBPM': 0, 'BPM': 0, 'VORP': 0, 'First': 0, 'Pts Won': 0, 'Pts Max': 0, 'Share': 0},
    inplace = True)

df = df[df.Tm != 'TOT']

int_columns = ['Age', 'G', 'GS', 'First', 'Pts Won', 'Pts Max', 'Rk']
percentage_float_columns = ['FG%', '3P%', '2P%', 'eFG%', 'FT%', 'TS%', '3PAr', 'FTr', 'WS/48', 'Share']
float_columns = ['MP', 'FG', 'FGA', '3P', '3PA', '2P', '2PA', 'FT', 'FTA', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF',
                 'PTS', 'PER', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%', 'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'OBPM', 'DBPM', 'BPM', 'VORP']

for column in int_columns:
    if column == 'GS':
        df[column] = df[column].astype(str).apply(lambda x: '0' if x == '' else x)

    if column == 'First' or 'Pts Won':
        df[column] = df[column].astype(str).apply(lambda x: x[:-2] if '.' in x else x)

    df[column] = df[column].astype(int)

for column in percentage_float_columns:
    if column == 'Share':
        df[column] = df[column].astype(str).apply(lambda x: '0.0' if x == '0' else x).astype(float)
    else:
        df[column] = df[column].apply(lambda x: x.zfill(1)).astype(float)

for column in float_columns:
    if column == 'MP' or 'PER' or 'USG%':
        df[column] = df[column].astype(str).apply(lambda x: '0.0' if x == '' else x)

    df[column] = df[column].astype(float)

df_train = df[df.Season <= 2020]

df_production = df[df.Season == 2021]

df_train.info()

df_production.info()

drive.mount('drive')

df_train.to_csv('df_1980_2020.csv', index = False)
!cp df_1980_2020.csv 'drive/My Drive/'

df_production.to_csv('df_2021.csv', index = False)
!cp df_2021.csv 'drive/My Drive/'